package de.tomcory.heimdall
/*
import de.tomcory.heimdall.vpn.mitm.Authority.Companion.generateCertificate
import org.junit.jupiter.api.extension.ExtendWith
import de.tomcory.heimdall.TimberExtension
import org.junit.jupiter.api.Test
import timber.log.Timber
import java.io.*
import java.lang.Exception
import java.net.*
import java.nio.channels.ClosedChannelException
import java.nio.channels.SelectionKey
import java.nio.channels.Selector
import java.nio.channels.SocketChannel

@ExtendWith(TimberExtension::class)
class DirectHttpTest {
    @Test
    fun testHttpsInit() {
        val clientHello1 = intArrayOf(0x16, 0x03, 0x01, 0x00, 0xE1, 0x01, 0x00, 0x00, 0xDD, 0x03, 0x03, 0xAA, 0x91, 0x76, 0xD9, 0x1F, 0xA6, 0x00, 0x95, 0x2F, 0xB2, 0x26, 0xF4, 0x84, 0x74, 0xB3, 0x56, 0x2E, 0xA9, 0x9D, 0x66, 0xDD, 0x7F, 0x76, 0x14, 0x4A, 0x5E, 0xD3, 0xC8, 0x3C, 0xEB, 0x21, 0x01, 0x20, 0xA6, 0x6A, 0xD8, 0xFC, 0x62, 0x41, 0x14, 0xA5, 0x5E, 0xCD, 0xD1, 0x44, 0x22, 0x89, 0x76, 0x4E, 0xCB, 0xC8, 0xF1, 0x64, 0xC1, 0xFB, 0xB9, 0x84, 0x2E, 0x16, 0x19, 0x15, 0xCB, 0x0C, 0xFE, 0x0A, 0x00, 0x24, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0xC0, 0x2B, 0xC0, 0x2F, 0xC0, 0x2C, 0xC0, 0x30, 0xCC, 0xA9, 0xCC, 0xA8, 0xC0, 0x09, 0xC0, 0x13, 0xC0, 0x0A, 0xC0, 0x14, 0x00, 0x9C, 0x00, 0x9D, 0x00, 0x2F, 0x00, 0x35, 0x00, 0x0A, 0x01, 0x00, 0x00, 0x70, 0x00, 0x17, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x06, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1D, 0x00, 0x20, 0x79, 0xAB, 0x90, 0xA7, 0xDF, 0x62, 0x36, 0x13, 0xC4, 0x81, 0x04, 0x36, 0x5C, 0x49, 0xBE, 0xEA, 0x48, 0xBC, 0x35, 0xE8, 0x42, 0x13, 0xFB, 0xC5, 0xC2, 0xF0, 0x76, 0xD7, 0x14, 0x89, 0xCD, 0x25, 0x00, 0x2D, 0x00, 0x02, 0x01, 0x01, 0x00, 0x2B, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03)
        val clientHello = intArrayOf(0x16, 0x03, 0x01, 0x02, 0x13, 0x01, 0x00, 0x02, 0x0F, 0x03, 0x03, 0x5D, 0x11, 0xF0, 0xF9, 0x43, 0x86, 0x1A, 0xA2, 0x6A, 0x0E, 0xA4, 0x7D, 0x5E, 0x42, 0x31, 0x84, 0x0A, 0x38, 0x48, 0x73, 0x94, 0xED, 0xA6, 0x57, 0x57, 0xD4, 0x39, 0x31, 0xF4, 0x84, 0xD7, 0x38, 0x20, 0xA4, 0x44, 0xC9, 0xCC, 0xAA, 0xC8, 0xE7, 0xFC, 0x97, 0xE9, 0xCD, 0x7D, 0x8D, 0xC2, 0x19, 0x11, 0x29, 0x35, 0x9C, 0xA4, 0x97, 0xD6, 0xD5, 0x40, 0x99, 0x6E, 0x12, 0x23, 0x50, 0x0E, 0x47, 0xC5, 0x00, 0x22, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0xC0, 0x2B, 0xC0, 0x2C, 0xCC, 0xA9, 0xC0, 0x2F, 0xC0, 0x30, 0xCC, 0xA8, 0xC0, 0x09, 0xC0, 0x0A, 0xC0, 0x13, 0xC0, 0x14, 0x00, 0x9C, 0x00, 0x9D, 0x00, 0x2F, 0x00, 0x35, 0x01, 0x00, 0x01, 0xA4, 0x00, 0x00, 0x00, 0x15, 0x00, 0x13, 0x00, 0x00, 0x10, 0x6D, 0x74, 0x61, 0x6C, 0x6B, 0x2E, 0x67, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x17, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x06, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1D, 0x00, 0x20, 0xD0, 0x20, 0x7E, 0x8D, 0x2F, 0xD9, 0xED, 0xF4, 0xFF, 0xF3, 0xF6, 0x05, 0xC6, 0xC6, 0x13, 0xD4, 0xE3, 0x2C, 0x6D, 0xD2, 0x1C, 0x96, 0x17, 0x8B, 0x6A, 0xD3, 0xEB, 0xE8, 0x76, 0xF9, 0x26, 0x77, 0x00, 0x2D, 0x00, 0x02, 0x01, 0x01, 0x00, 0x2B, 0x00, 0x09, 0x08, 0x03, 0x04, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00, 0x29, 0x01, 0x0A, 0x00, 0xE5, 0x00, 0xDF, 0x02, 0xAB, 0x93, 0xB0, 0x3C, 0xD1, 0x86, 0xE9, 0x7A, 0x23, 0xDF, 0x4D, 0xDA, 0xA2, 0xCE, 0xC5, 0x52, 0x06, 0x31, 0x8F, 0xF4, 0x9D, 0x9C, 0xB9, 0x4A, 0x9F, 0xF4, 0x64, 0x37, 0x3C, 0x5D, 0xF5, 0x1F, 0xE0, 0x56, 0x40, 0x66, 0x10, 0x3D, 0xBD, 0x76, 0x03, 0x53, 0xA6, 0x5A, 0xBA, 0x6F, 0x34, 0xB7, 0x65, 0xE7, 0xC7, 0xDF, 0x39, 0xB7, 0xD1, 0x11, 0x65, 0x3B, 0x75, 0x9D, 0x8A, 0x4D, 0xB5, 0x18, 0x45, 0x2E, 0x9F, 0xD0, 0x96, 0xFC, 0xA1, 0x7B, 0x49, 0x31, 0x08, 0x2D, 0xDA, 0x12, 0x4A, 0x83, 0xB4, 0x06, 0xAA, 0xA5, 0x43, 0x2E, 0x4C, 0x3F, 0x5F, 0x76, 0x36, 0x37, 0x95, 0x19, 0x09, 0xCC, 0x14, 0xCC, 0xCC, 0xE6, 0xCD, 0xD8, 0x96, 0xE5, 0xB7, 0x84, 0xEC, 0x34, 0x2A, 0x09, 0xAF, 0x0B, 0x71, 0xE4, 0x4B, 0xF2, 0xD8, 0x28, 0x86, 0xE9, 0xC5, 0x57, 0x9F, 0x2F, 0x0A, 0xAF, 0x9F, 0x34, 0xC7, 0x62, 0x25, 0x3A, 0x51, 0x33, 0x5B, 0xBB, 0x00, 0x71, 0x8F, 0x44, 0x54, 0xC8, 0x47, 0xA7, 0x79, 0xE2, 0x9D, 0x50, 0xB4, 0x71, 0x25, 0xD3, 0x88, 0x65, 0xA0, 0x10, 0x14, 0xC4, 0x29, 0x13, 0x8A, 0xC2, 0x24, 0x1A, 0x0A, 0x76, 0xB9, 0xF2, 0x51, 0xE8, 0x41, 0x3E, 0x7C, 0x64, 0x23, 0x13, 0xA8, 0x69, 0x6A, 0xE5, 0x5C, 0x2A, 0xD4, 0xD2, 0x2B, 0x82, 0xE4, 0x40, 0xC6, 0x12, 0x0A, 0xF9, 0xAB, 0xA1, 0x48, 0x90, 0x8B, 0xA3, 0xFA, 0x64, 0x3E, 0xB1, 0x67, 0xF7, 0x58, 0x62, 0x2C, 0xE9, 0x4D, 0x63, 0x27, 0x42, 0x4C, 0x4C, 0xE9, 0xCF, 0xD8, 0x0F, 0x5B, 0xD5, 0x3D, 0x53, 0xB0, 0x23, 0xCE, 0x13, 0x00, 0x21, 0x20, 0x51, 0x30, 0x6B, 0x95, 0xB8, 0x51, 0x7A, 0x3E, 0x91, 0xBC, 0xAC, 0x67, 0x02, 0xB1, 0xC6, 0x43, 0x56, 0x42, 0x2E, 0xCB, 0x52, 0xAF, 0x9B, 0x88, 0x13, 0x76, 0x89, 0x74, 0xFC, 0x2E, 0xCC, 0xBE)
        if(clientHello[0] != 0x16) {
            Timber.d("It's not a handshake record")

        } else {
            Timber.d("It's a handshake record")

            Timber.d("Protocol version is %s.%s", clientHello[1], clientHello[2])

            val totalLength = clientHello[3] shl 8 or clientHello[4]
            Timber.d("Total length is %s", totalLength)

            if(clientHello[5] != 0x01) {
                Timber.d("It's not a CLIENT HELLO")
            } else {
                Timber.d("It's a CLIENT HELLO")

                Timber.d("CLIENT HELLO length is %s", clientHello[6] shl 16 or clientHello[7] shl 8 or clientHello[8])

                Timber.d("Client version is %s.%s", clientHello[9], clientHello[10])

                var i = 43

                val sessionLength = clientHello[i++]
                Timber.d("Session length is %s", sessionLength)

                i += sessionLength

                val cipherLength = clientHello[i++] shl 8 or clientHello[i++]
                Timber.d("Cipher length is %s", cipherLength)

                i += cipherLength

                val compressionLength = clientHello[i++]
                Timber.d("Compression methods length is %s", compressionLength)

                i += compressionLength

                val totalExtensionsLength = clientHello[i++] shl 8 or clientHello[i++]
                Timber.d("Total extensions length is %s", totalExtensionsLength)

                var j = 0

                while(j < totalExtensionsLength) {
                    val extensionValue = clientHello[i + j++] shl 8 or clientHello[i + j++]
                    val extensionLength = clientHello[i + j++] shl 8 or clientHello[i + j++]
                    Timber.d("Extension %s has length %s", extensionValue, extensionLength)
                    if(extensionValue == 0) {
                        var k = 0
                        while(k < extensionLength) {
                            val entryLength = clientHello[i + j + k++] shl 8 or clientHello[i + j + k++]
                            val entryType = clientHello[i + j + k++] shl 8 or clientHello[i + j + k++]
                            val entry = String(clientHello.copyOfRange(i + j + ++k, i + j + k + entryLength - 3).map { x -> x.toChar() }.toCharArray())
                            Timber.d("Entry of type %s has length %s: %s", entryType, entryLength, entry)
                            k += entryLength - 3
                        }
                    }
                    j += extensionLength
                }
            }
        }
    }

    @Test
    fun testHttpsConnection() {
        val srcPort = 12345
        val dstPort = 443
        var dstAddress: InetAddress? = null
        dstAddress = try {
            Inet4Address.getByName("www.google.com")
        } catch (e: UnknownHostException) {
            return
        }
        println("Test started")

        // set up the NIO selector that is used to poll the outgoing sockets for incoming packets
        val socketSelector: Selector
        socketSelector = try {
            Selector.open()
        } catch (e: IOException) {
            Timber.e(e, "Error opening selector")
            return
        }

        // create a non-blocking SocketChannel to which to forward data and protect it from the VPN
        val socketChannel: SocketChannel
        try {
            // open the channel now, but connect it asynchronously for better performance
            socketChannel = SocketChannel.open()
            socketChannel.configureBlocking(false)
            socketChannel.socket().keepAlive = true
            socketChannel.socket().tcpNoDelay = true
            socketChannel.socket().soTimeout = 0
            socketChannel.socket().receiveBufferSize = 65535
            socketChannel.connect(InetSocketAddress(dstAddress, dstPort))
        } catch (e: IOException) {
            Timber.e(e, "Error opening SocketChannel")
            return
        }
        try {
            socketChannel.finishConnect()
        } catch (e: IOException) {
            e.printStackTrace()
        }
        val selectionKey: SelectionKey
        selectionKey = try {
            socketChannel.register(socketSelector, SelectionKey.OP_CONNECT)
        } catch (e: ClosedChannelException) {
            Timber.e(e, "Error registering SocketChannel")
            return
        }
        var selectedChannels = 0
        try {
            selectedChannels = socketSelector.select()
        } catch (e: IOException) {
            e.printStackTrace()
        }
        if (selectedChannels != 1) {
            Timber.e("Unexpected number of SocketChannels selected: %s", selectedChannels)
        }
        val key = socketSelector.selectedKeys().iterator().next()
        if (key.isConnectable) {
            Timber.d("SocketChannel ready to connect")
        } else {
            Timber.e("Error selecting SocketChannel %s", key.interestOps())
        }
        generateCertificate(File("testAuth"))
    }

    @Test
    fun testGet() {
        val server = "www.google.com"
        val path = "/"
        println("Loading contents of URL: $server")
        try {
            // Connect to the server
            val socket = Socket(server, 80)

            // Create input and output streams to read from and write to the server
            val out = PrintStream(socket.getOutputStream())
            val `in` = BufferedReader(InputStreamReader(socket.getInputStream()))

            // Follow the HTTP protocol of GET <path> HTTP/1.0 followed by an empty line
            out.println("GET $path HTTP/1.0")
            out.println()

            // Read data from the server until we finish reading the document
            var line = `in`.readLine()
            while (line != null) {
                println(line)
                line = `in`.readLine()
            }

            // Close our streams
            `in`.close()
            out.close()
            socket.close()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}

 */
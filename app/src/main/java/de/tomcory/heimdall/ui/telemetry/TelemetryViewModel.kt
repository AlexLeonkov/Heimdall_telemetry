package de.tomcory.heimdall.ui.telemetry

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import de.tomcory.heimdall.persistence.database.HeimdallDatabase
import de.tomcory.heimdall.persistence.database.entity.App as EntityApp
import de.tomcory.heimdall.persistence.database.entity.Request as EntityRequest
import de.tomcory.heimdall.persistence.database.entity.Response as EntityResponse
import kotlinx.coroutines.launch

class TelemetryViewModel : ViewModel() {

    private val db: HeimdallDatabase? = HeimdallDatabase.instance

    companion object {
        const val FULLY_ANONYMIZED = 1 shl 0
        const val NO_IP_TIMESTAMPS = 1 shl 1
        const val DISCLOSED_CONTENT = 1 shl 2
    }

    fun createFakeData() {
        viewModelScope.launch {
            val currentTime = System.currentTimeMillis()

            val fakeRequest = EntityRequest(
                    id = 0, // Assuming ID is autogenerated
                    timestamp = currentTime,
                    reqResId = 101,
                    headers = "Content-Type: application/json",
                    content = "{\"key\":\"value\"}",
                    contentLength = 15,
                    method = "GET",
                    remoteHost = "example.com",
                    remotePath = "/api/data",
                    remoteIp = "192.168.1.1",
                    remotePort = 8080,
                    localIp = "10.0.0.1",
                    localPort = 8081,
                    initiatorId = 200,
                    initiatorPkg = "com.example.app",
                    isTracker = false
            )

            val fakeResponse = EntityResponse(
                    id = 0, // Assuming ID is autogenerated
                    timestamp = currentTime,
                    reqResId = 101,
                    headers = "Content-Type: application/json",
                    content = "{\"response\":\"success\"}",
                    contentLength = 20,
                    statusCode = 200,
                    statusMsg = "OK",
                    remoteHost = "example.com",
                    remoteIp = "192.168.1.1",
                    remotePort = 8080,
                    localIp = "10.0.0.1",
                    localPort = 8081,
                    initiatorId = 200,
                    initiatorPkg = "com.example.app",
                    isTracker = false
            )

            val fakeApp = EntityApp(
                    packageName = "com.example.fakeapp123",
                    label = "Fake App",
                    versionName = "1.0.0",
                    versionCode = 1,
                    isInstalled = true,
                    isSystem = false,
                    flags = 0
                    // Assume icon is handled elsewhere as it's marked with @Ignore
            )

            db?.requestDao?.insert(fakeRequest)
            db?.responseDao?.insert(fakeResponse)
//            db?.appDao?.insertApps(fakeApp)
        }
    }
}
